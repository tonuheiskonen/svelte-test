import './Login.svelte.css.proxy.js';
/* src\components\Login.svelte generated by Svelte v3.32.3 */
import {
	SvelteComponent,
	append,
	attr,
	component_subscribe,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	prevent_default,
	run_all,
	safe_not_equal,
	set_input_value,
	set_store_value,
	space,
	text
} from "../../_snowpack/pkg/svelte/internal.js";

import { user } from "../store.js";

function create_fragment(ctx) {
	let main;
	let form;
	let fieldset0;
	let label0;
	let t1;
	let input0;
	let t2;
	let fieldset1;
	let label1;
	let t4;
	let input1;
	let t5;
	let fieldset2;
	let button;
	let t6;
	let button_disabled_value;
	let mounted;
	let dispose;

	return {
		c() {
			main = element("main");
			form = element("form");
			fieldset0 = element("fieldset");
			label0 = element("label");
			label0.textContent = "kasutajanimi";
			t1 = space();
			input0 = element("input");
			t2 = space();
			fieldset1 = element("fieldset");
			label1 = element("label");
			label1.textContent = "salasõna";
			t4 = space();
			input1 = element("input");
			t5 = space();
			fieldset2 = element("fieldset");
			button = element("button");
			t6 = text("✔");
			attr(label0, "for", "username");
			attr(label0, "class", "svelte-rk3sva");
			attr(input0, "type", "text");
			attr(input0, "id", "username");
			attr(input0, "class", "svelte-rk3sva");
			attr(fieldset0, "class", "svelte-rk3sva");
			attr(label1, "for", "password");
			attr(label1, "class", "svelte-rk3sva");
			attr(input1, "type", "password");
			attr(input1, "id", "password");
			attr(input1, "class", "svelte-rk3sva");
			attr(fieldset1, "class", "svelte-rk3sva");
			attr(button, "type", "submit");
			button.disabled = button_disabled_value = !/*username*/ ctx[0] || !/*password*/ ctx[1];
			attr(button, "class", "svelte-rk3sva");
			attr(fieldset2, "class", "svelte-rk3sva");
			attr(form, "class", "svelte-rk3sva");
			attr(main, "class", "svelte-rk3sva");
		},
		m(target, anchor) {
			insert(target, main, anchor);
			append(main, form);
			append(form, fieldset0);
			append(fieldset0, label0);
			append(fieldset0, t1);
			append(fieldset0, input0);
			set_input_value(input0, /*username*/ ctx[0]);
			append(form, t2);
			append(form, fieldset1);
			append(fieldset1, label1);
			append(fieldset1, t4);
			append(fieldset1, input1);
			set_input_value(input1, /*password*/ ctx[1]);
			append(form, t5);
			append(form, fieldset2);
			append(fieldset2, button);
			append(button, t6);

			if (!mounted) {
				dispose = [
					listen(input0, "input", /*input0_input_handler*/ ctx[3]),
					listen(input1, "input", /*input1_input_handler*/ ctx[4]),
					listen(button, "click", prevent_default(/*login*/ ctx[2]))
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*username*/ 1 && input0.value !== /*username*/ ctx[0]) {
				set_input_value(input0, /*username*/ ctx[0]);
			}

			if (dirty & /*password*/ 2 && input1.value !== /*password*/ ctx[1]) {
				set_input_value(input1, /*password*/ ctx[1]);
			}

			if (dirty & /*username, password*/ 3 && button_disabled_value !== (button_disabled_value = !/*username*/ ctx[0] || !/*password*/ ctx[1])) {
				button.disabled = button_disabled_value;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(main);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $user;
	component_subscribe($$self, user, $$value => $$invalidate(5, $user = $$value));
	let username;
	let password;

	const login = () => {
		set_store_value(user, $user = { name: username }, $user);
	};

	function input0_input_handler() {
		username = this.value;
		$$invalidate(0, username);
	}

	function input1_input_handler() {
		password = this.value;
		$$invalidate(1, password);
	}

	return [username, password, login, input0_input_handler, input1_input_handler];
}

class Login extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Login;